using AutoMapper;
using Domain.Aggregates;
using Infrastructure.Context;
using Infrastructure.Repositories.Default;
using Infrastructure.Context.Tables;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Domain.Interfaces.Repositories.Base;
using MediatR;
using Domain.Interfaces.Tables;
using Domain.Interfaces.Entities.Base;

namespace Infrastructure.Repositories.Base
{
    public class RepositoryBase<TTable, TModel>(DefaultContext context, IMapper mapper) : DefaultRepository<TTable, TModel>(context, mapper), IRepositoryBase<TModel>
        where TTable : class, ITable
        where TModel : class, IEntity
    {
        public async Task<int> Count<TFilter>(TFilter filter) => await GetCountList<TFilter>(filter);

        public async Task<bool> Exist<TFilter>(TFilter filter) => await GetExist<TFilter>(filter);

        public async Task<TReturnDTO?> GetById<TReturnDTO>(int id) => await Get<TReturnDTO>(id);

        public async Task<PagedResult<TReturnDTO>> PagedList<TReturnDTO, TFilter>(TFilter filter, int pageNumber, int pageSize) => await GetPagedList<TReturnDTO, TFilter>(filter, pageNumber, pageSize);

        public async Task<List<TReturnDTO>> List<TReturnDTO, TFilter>(TFilter filter) => await GetFullList<TReturnDTO, TFilter>(filter);

        public async Task<IAutoGeneratedValue> Insert(TModel model) => await InsertData(model);

        public Task<IAutoGeneratedValue> Update(TModel entity)
        {
            throw new NotImplementedException();
        }

        Task<bool> IGenericRepository<TModel>.Delete<TEntity>(int id)
        {
            throw new NotImplementedException();
        }
    }
}
