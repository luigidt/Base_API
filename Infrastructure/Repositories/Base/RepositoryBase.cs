using AutoMapper;
using Domain.Aggregates;
using Infrastructure.Context;
using Infrastructure.Repositories.Default;
using Infrastructure.Context.Tables;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Domain.Interfaces.Repositories.Base;
using MediatR;
using Domain.Interfaces.Tables;
using Domain.Interfaces.Entities.Base;

namespace Infrastructure.Repositories.Base
{
    public class RepositoryBase<TTable, TModel>(DefaultContext context, IMapper mapper) : DefaultRepository<TTable, TModel>(context, mapper), IRepositoryBase<TModel>
        where TTable : class, ITable
        where TModel : class, IEntity
    {
        private readonly IMapper _mapper = mapper;
        private readonly DefaultContext _defaultContext = context;

        public async Task<int> Count<TGenericEntity>(Expression<Func<TGenericEntity, bool>>? expression = null) => await GetCountList<TGenericEntity>(expression);

        public Task Delete<TGenericEntity>(int id)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> Exist<TGenericEntity>(Expression<Func<TGenericEntity, bool>> expression) => await GetExist<TGenericEntity>(expression);

        public async Task<TGenericEntity?> Get<TGenericEntity>(Expression<Func<TGenericEntity, bool>> expression) => await GetByCondition<TGenericEntity>(expression);

        public async Task<IAutoGeneratedValue> Insert(TModel model)
        {
            return await InsertData(model);
        }

        public async Task<PagedResult<TGenericEntity>> PagedList<TGenericEntity>(Expression<Func<TGenericEntity, bool>>? expression, int pageNumber, int pageSize) => await GetPagedList<TGenericEntity>(expression, pageNumber, pageSize);

        public async Task<List<TGenericDTO>> List<TGenericDTO>(TGenericDTO expression) where TGenericDTO : class => await GetFullList<TGenericDTO>(expression);

        public Task Update<TGenericEntity>(TGenericEntity entity)
        {
            throw new NotImplementedException();
        }
    }
}
