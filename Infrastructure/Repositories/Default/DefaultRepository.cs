using AutoMapper;
using AutoMapper.QueryableExtensions;
using Domain.Aggregates;
using Domain.Interfaces.Entities.Base;
using Domain.Interfaces.Repositories.Base;
using Domain.Interfaces.Tables;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Infrastructure.Repositories.Default
{
    public class DefaultRepository<TTable, TGenericEntity> 
        where TTable : class, ITable
        where TGenericEntity : class, IEntity
    {
        protected readonly DefaultContext DbContext;
        protected readonly DbSet<TTable> DbSet;
        protected readonly IMapper Mapper;

        protected virtual IQueryable<TTable> QueryableEntity => DbSet.AsQueryable();

        public DefaultRepository(DefaultContext context, IMapper mapper)
        {
            DbContext = context;
            Mapper = mapper;
            DbSet = DbContext.Set<TTable>();
        }

        // Método para construir uma expressão de filtro a partir de um DTO
        public Expression<Func<TTable, bool>> BuildFilterExpression<TDto>(TDto dto) where TDto : class
        {
            var parameter = Expression.Parameter(typeof(TTable), "x");
            Expression body = null;

            foreach (var property in typeof(TDto).GetProperties())
            {
                var value = property.GetValue(dto);
                if (value != null)
                {
                    var propertyExpression = Expression.Property(parameter, property.Name);
                    var constant = Expression.Constant(value);
                    var equality = Expression.Equal(propertyExpression, constant);

                    body = body == null ? equality : Expression.AndAlso(body, equality);
                }
            }

            return body == null ? x => true : Expression.Lambda<Func<TTable, bool>>(body, parameter);
        }

        // Método para obter uma lista completa de DTOs com base em um DTO de filtro
        public async Task<List<TDto>> GetFullList<TDto>(TDto dto) where TDto : class
        {
            var filter = BuildFilterExpression(dto);
            var query = QueryableEntity;

            if (filter != null)
            {
                query = query.Where(filter);
            }

            return await query
                .ProjectTo<TDto>(Mapper.ConfigurationProvider)
                .ToListAsync();
        }


        protected async Task<int> GetCountList<TGenericEntity>(Expression<Func<TGenericEntity, bool>>? expression = null)
        {
            IQueryable<TGenericEntity> query = BuildQuery(expression);

            return await query.CountAsync();
        }

        protected async Task<bool> GetExist<TGenericEntity>(Expression<Func<TGenericEntity, bool>> expression)
        {
            IQueryable<TGenericEntity> query = BuildQuery(expression);

            return await query.AnyAsync();
        }

        protected async Task<TGenericEntity?> GetByCondition<TGenericEntity>(Expression<Func<TGenericEntity, bool>> expression)
        {
            IQueryable<TGenericEntity> query = BuildQuery(expression);

            return await query.FirstOrDefaultAsync();
        }

        public virtual async Task<AutoGeneratedValue> InsertData(TGenericEntity model)
        {
            TTable entity = Mapper.Map<TTable>(model);

            var entry = await DbSet.AddAsync(entity);

            return new AutoGeneratedValue(() =>
            {
                var primaryKey = entry.Metadata.FindPrimaryKey().Properties.First();

                return (int)Convert.ChangeType(entry.Entity.GetType().GetProperty(primaryKey.Name).GetValue(entry.Entity), typeof(int));
            });
        }

        //public virtual async Task Update(TDomain dominio)
        //{
        //    var tempEntity = await Buscar(dominio.Id);
        //    var entity = await ConverteDominioParaEntidade(dominio, tempEntity);

        //    DbContext.Entry(tempEntity).State = EntityState.Detached;
        //    DbSet.Update(entity);
        //}

        //public virtual async Task Delete(int id)
        //{
        //    var entity = await Buscar(id);
        //    DbSet.Remove(entity);
        //}

        public async Task<PagedResult<TGenericEntity>> GetPagedList<TGenericEntity>(Expression<Func<TGenericEntity, bool>>? expression = null, int pageNumber = 1, int pageSize = 10)
        {
            IQueryable<TGenericEntity> query = BuildQuery(expression);

            int totalItemCount = await query.CountAsync();

            List<TGenericEntity> items = await query
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            return new PagedResult<TGenericEntity>
            {
                Items = items,
                TotalItems = totalItemCount,
                PageNumber = pageNumber,
                PageSize = pageSize,
                TotalPages = (int)Math.Ceiling(totalItemCount / (double)pageSize)
            };
        }

        private IQueryable<TGenericEntity> BuildQuery<TGenericEntity>(Expression<Func<TGenericEntity, bool>>? expression)
        {
            var query = Mapper.ProjectTo<TGenericEntity>(QueryableEntity);

            if (expression != null)
                query = query.Where(expression);
            return query;
        }
    }

    public class AutoGeneratedValue : IAutoGeneratedValue
    {
        private Func<int> primaryKey;

        public AutoGeneratedValue(Func<int> chavePrimariaFunc)
        {
            primaryKey = chavePrimariaFunc;
        }

        public int Value => primaryKey?.Invoke() ?? 0;
    }
}
